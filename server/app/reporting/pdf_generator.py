"""
PDF Generator for EarningsCall-TLDR
Handles PDF report generation with charts and analysis
"""

from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
import io
from typing import Dict, Any, List
import logging
import pandas as pd
import numpy as np

logger = logging.getLogger(__name__)

class PDFGenerator:
    """Generate PDF reports for earnings call analysis"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Setup custom paragraph styles"""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        ))
        
        # Section header style
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            spaceBefore=20,
            textColor=colors.darkblue
        ))
        
        # Bullet point style
        self.styles.add(ParagraphStyle(
            name='BulletPoint',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            leftIndent=20
        ))
        
        # Metric style
        self.styles.add(ParagraphStyle(
            name='Metric',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            fontName='Helvetica-Bold'
        ))
    
    def generate_analysis_report(self, analysis_data: Dict[str, Any], output_path: str) -> str:
        """Generate a comprehensive PDF report"""
        try:
            doc = SimpleDocTemplate(output_path, pagesize=letter)
            story = []
            
            # Title page
            story.extend(self._create_title_page(analysis_data))
            
            # Executive Summary
            story.extend(self._create_executive_summary(analysis_data))
            
            # Tier A: Why the Stock Moved
            story.extend(self._create_tier_a_section(analysis_data))
            
            # Tier B: Plain English Summary
            story.extend(self._create_tier_b_section(analysis_data))
            
            # Tier C: Expert Analysis
            story.extend(self._create_tier_c_section(analysis_data))
            
            # Financial Metrics
            story.extend(self._create_financial_metrics_section(analysis_data))
            
            # Risk Factors
            story.extend(self._create_risk_factors_section(analysis_data))
            
            # Charts and Visualizations
            story.extend(self._create_charts_section(analysis_data))
            
            # Build PDF
            doc.build(story)
            return output_path
            
        except Exception as e:
            logger.error(f"Error generating PDF report: {e}")
            raise
    
    def _create_title_page(self, data: Dict[str, Any]) -> List:
        """Create the title page"""
        elements = []
        
        # Title
        title = Paragraph(f"Earnings Call Analysis Report", self.styles['CustomTitle'])
        elements.append(title)
        elements.append(Spacer(1, 30))
        
        # Company info
        ticker = data.get('ticker', 'N/A')
        period = data.get('period', 'N/A')
        company_info = f"<b>Company:</b> {ticker}<br/>"
        company_info += f"<b>Period:</b> {period}<br/>"
        company_info += f"<b>Report Date:</b> {datetime.now().strftime('%B %d, %Y')}"
        
        info_para = Paragraph(company_info, self.styles['Normal'])
        elements.append(info_para)
        elements.append(Spacer(1, 40))
        
        # Disclaimer
        disclaimer = "‚ö†Ô∏è This report is for informational purposes only and should not be considered as investment advice. Always conduct your own research and consult with financial professionals before making investment decisions."
        disclaimer_para = Paragraph(disclaimer, self.styles['Normal'])
        elements.append(disclaimer_para)
        
        elements.append(Spacer(1, 30))
        elements.append(Paragraph("Generated by EarningsCall-TLDR", self.styles['Normal']))
        
        return elements
    
    def _create_executive_summary(self, data: Dict[str, Any]) -> List:
        """Create executive summary section"""
        elements = []
        
        elements.append(Paragraph("Executive Summary", self.styles['SectionHeader']))
        
        # Key highlights
        if 'tier_a_bullets' in data and data['tier_a_bullets']:
            summary_text = "<b>Key Highlights:</b><br/>"
            for bullet in data['tier_a_bullets'][:3]:  # Top 3 bullets
                sentiment_icon = "üìà" if bullet.get('sentiment') == 'positive' else "üìâ" if bullet.get('sentiment') == 'negative' else "‚û°Ô∏è"
                summary_text += f"{sentiment_icon} {bullet.get('text', '')}<br/>"
            
            summary_para = Paragraph(summary_text, self.styles['Normal'])
            elements.append(summary_para)
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_tier_a_section(self, data: Dict[str, Any]) -> List:
        """Create Tier A: Why the Stock Moved section"""
        elements = []
        
        elements.append(Paragraph("Why the Stock Moved", self.styles['SectionHeader']))
        
        if 'tier_a_bullets' in data and data['tier_a_bullets']:
            for bullet in data['tier_a_bullets']:
                sentiment_icon = "üìà" if bullet.get('sentiment') == 'positive' else "üìâ" if bullet.get('sentiment') == 'negative' else "‚û°Ô∏è"
                confidence = bullet.get('confidence', 0)
                
                bullet_text = f"{sentiment_icon} <b>{bullet.get('text', '')}</b><br/>"
                bullet_text += f"<i>Confidence: {confidence}%</i>"
                
                bullet_para = Paragraph(bullet_text, self.styles['BulletPoint'])
                elements.append(bullet_para)
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_tier_b_section(self, data: Dict[str, Any]) -> List:
        """Create Tier B: Plain English Summary section"""
        elements = []
        
        elements.append(Paragraph("Plain English Summary", self.styles['SectionHeader']))
        
        if 'tier_b_summary' in data:
            summary_para = Paragraph(data['tier_b_summary'], self.styles['Normal'])
            elements.append(summary_para)
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_tier_c_section(self, data: Dict[str, Any]) -> List:
        """Create Tier C: Expert Analysis section"""
        elements = []
        
        elements.append(Paragraph("Expert Analysis", self.styles['SectionHeader']))
        
        if 'tier_c_expert' in data and 'metrics' in data['tier_c_expert']:
            metrics = data['tier_c_expert']['metrics']
            
            # Create metrics table
            table_data = [['Metric', 'Value']]
            for key, value in metrics.items():
                table_data.append([key.replace('_', ' ').title(), str(value)])
            
            metrics_table = Table(table_data, colWidths=[2*inch, 3*inch])
            metrics_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            elements.append(metrics_table)
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_financial_metrics_section(self, data: Dict[str, Any]) -> List:
        """Create financial metrics section"""
        elements = []
        
        elements.append(Paragraph("Key Financial Metrics", self.styles['SectionHeader']))
        
        if 'facts' in data and data['facts']:
            for fact in data['facts']:
                metric_text = f"<b>{fact.get('metric', '')}:</b> {fact.get('value', '')}"
                metric_para = Paragraph(metric_text, self.styles['Metric'])
                elements.append(metric_para)
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_risk_factors_section(self, data: Dict[str, Any]) -> List:
        """Create risk factors section"""
        elements = []
        
        elements.append(Paragraph("Risk Factors", self.styles['SectionHeader']))
        
        if 'risks' in data and data['risks']:
            for risk in data['risks']:
                risk_text = f"‚ö†Ô∏è {risk.get('description', '')}"
                risk_para = Paragraph(risk_text, self.styles['BulletPoint'])
                elements.append(risk_para)
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_charts_section(self, data: Dict[str, Any]) -> List:
        """Create charts and visualizations section"""
        elements = []
        
        elements.append(Paragraph("Charts & Visualizations", self.styles['SectionHeader']))
        
        # Create sample price chart
        try:
            chart_img = self._create_sample_price_chart()
            elements.append(chart_img)
        except Exception as e:
            logger.error(f"Error creating chart: {e}")
            elements.append(Paragraph("Chart generation failed", self.styles['Normal']))
        
        elements.append(Spacer(1, 20))
        return elements
    
    def _create_sample_price_chart(self) -> Image:
        """Create a sample price chart"""
        # Create sample data
        dates = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')
        prices = [100 + i * 0.1 + np.random.normal(0, 2) for i in range(len(dates))]
        
        # Create the plot
        plt.figure(figsize=(10, 6))
        plt.plot(dates, prices, linewidth=2, color='blue')
        plt.title('Sample Stock Price Chart', fontsize=14, fontweight='bold')
        plt.xlabel('Date')
        plt.ylabel('Price ($)')
        plt.grid(True, alpha=0.3)
        
        # Format x-axis
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))
        plt.xticks(rotation=45)
        
        # Save to buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        # Create reportlab image
        img = Image(buffer, width=6*inch, height=3.6*inch)
        return img
